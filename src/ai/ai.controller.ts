import express, { Router } from 'express';
import { SlashCommandRequest } from '../shared/models/slack/slack-models';
import { KnownBlock } from '@slack/web-api';
import { AIService } from './ai.service';
import { WebService } from '../shared/services/web/web.service';
import { getChunks } from '../shared/util/getChunks';
import { suppressedMiddleware } from '../shared/middleware/suppression';
import { textMiddleware } from './middleware/textMiddleware';
import { aiMiddleware } from './middleware/aiMiddleware';

export const aiController: Router = express.Router();
aiController.use(suppressedMiddleware);
aiController.use(textMiddleware);
aiController.use(aiMiddleware);

const webService = WebService.getInstance();
const aiService = new AIService();


aiController.post('/ai/text', async (req, res) => {
  const request: SlashCommandRequest = req.body;
  res.status(200).send('Processing your request. Please be patient...');
  const generatedText: string | undefined = await aiService
    .generateText(request.user_id, request.team_id, request.text)
    .catch((e) => {
      console.error(e);
      const errorMessage = `\`Sorry! Your request for ${request.text} failed. Please try again.\``;
      webService.sendEphemeral(request.channel_id, errorMessage, request.user_id);
      return undefined;
    });

  if (!generatedText) {
    return;
  }

  const blocks: KnownBlock[] = [];

  const chunks = getChunks(generatedText);

  if (chunks) {
    chunks.forEach((chunk) => {
      blocks.push({
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `${chunk}`,
        },
      });
    });
  }

  blocks.push({
    type: 'divider',
  });

  blocks.push({
    type: 'context',
    elements: [
      {
        type: 'mrkdwn',
        text: `:altman: _Generated by <@${request.user_id}> | "${request.text}"_ :altman:`,
      },
    ],
  });

  webService.sendMessage(request.channel_id, request.text, blocks).catch((e) => {
    console.error(e);
    aiService.decrementDaiyRequests(request.user_id, request.team_id);
    webService.sendMessage(
      request.user_id,
      'Sorry, unable to send the requested text to Slack. You have been credited for your Moon Token. Perhaps you were trying to send in a private channel? If so, invite @MoonBeam and try again.',
    );
  });
});

aiController.post('/ai/gemini/text', (req, res) => {
  const { user_id, team_id, channel_id, text} = req.body;
  res.status(200).send('Processing your request. Please be patient...');
  aiService
    .generateGeminiText(user_id, team_id, channel_id, text)
    .catch((e) => {
      console.error(e);
      const errorMessage = `\`Sorry! Your request for ${text} failed. Please try again.\``;
      webService.sendEphemeral(channel_id, errorMessage, user_id);
      return undefined;
    });
});

aiController.post('/ai/image', (req, res) => {
  const { user_id, team_id, channel_id, text} = req.body;
  res.status(200).send('Processing your request. Please be patient...');
  aiService.generateImage(user_id, team_id, text)
  .catch((e) => {
    console.error(e);
    const errorMessage = `\`Sorry! Your request for ${text} failed. Please try again.\``;
    webService.sendEphemeral(channel_id, errorMessage, user_id);
    return undefined;
  });
});
