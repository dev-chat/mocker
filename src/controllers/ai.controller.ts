import express, { Router } from 'express';
import { SlashCommandRequest } from '../shared/models/slack/slack-models';
import { SuppressorService } from '../shared/services/suppressor.service';
import { KnownBlock } from '@slack/web-api';
import { AIService } from '../services/ai/ai.service';
import { WebService } from '../services/web/web.service';

export const aiController: Router = express.Router();

const webService = WebService.getInstance();
const suppressorService = new SuppressorService();
const aiService = new AIService();

aiController.post('/ai/text', async (req, res) => {
  const request: SlashCommandRequest = req.body;
  if (await suppressorService.isSuppressed(request.user_id, request.team_id)) {
    res.send(`Sorry, can't do that while muzzled.`);
  } else if (!request.text) {
    res.send('Sorry, you must send a message to generate text.');
  } else {
    // Need to do this to avoid timeout issues.
    res.status(200).send();
    const generatedText: string | undefined = await aiService.generateText(request.text).catch(e => {
      console.error(e);
      return undefined;
    });

    if (!generatedText) {
      return;
    }

    const blocks: KnownBlock[] = [
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `> ${generatedText}`,
        },
      },
      {
        type: 'context',
        elements: [
          {
            type: 'mrkdwn',
            text: `:receipt: _Generated by <@${request.user_id}> | Prompt: ${request.text}_ :receipt:`,
          },
        ],
      },
    ];
    webService.sendMessage(request.channel_id, request.text, blocks);
  }
});
