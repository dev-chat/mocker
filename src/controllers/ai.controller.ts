import express, { Router } from 'express';
import { SlashCommandRequest } from '../shared/models/slack/slack-models';
import { SuppressorService } from '../shared/services/suppressor.service';
import { KnownBlock } from '@slack/web-api';
import { AIService } from '../services/ai/ai.service';
import { WebService } from '../services/web/web.service';
import { uuid } from 'uuidv4';

export const aiController: Router = express.Router();

const webService = WebService.getInstance();
const suppressorService = new SuppressorService();
const aiService = new AIService();

aiController.post('/ai/text', async (req, res) => {
  const request: SlashCommandRequest = req.body;
  if (await suppressorService.isSuppressed(request.user_id, request.team_id)) {
    res.send(`Sorry, can't do that while muzzled.`);
  } else if (!request.text) {
    res.send('Sorry, you must send a message to generate text.');
  } else if (await aiService.isAlreadyInflight(request.user_id, request.team_id)) {
    res.send('Sorry, you already have a request in flight. Please wait for that request to complete.');
  } else if (await aiService.isAlreadyAtMaxRequests(request.user_id, request.team_id)) {
    res.send('Sorry, you have reached your maximum number of requests per day. Try again tomorrow.');
  } else {
    // Need to do this to avoid timeout issues.
    res.status(200).send('Processing your request. Please be patient...');
    const generatedText: string | undefined = await aiService
      .generateText(request.user_id, request.team_id, request.text)
      .catch(e => {
        console.error(e);
        const errorMessage = `\`Sorry! Your request for ${request.text} failed. Please try again.\``;
        webService.sendEphemeral(request.channel_id, errorMessage, request.user_id);
        return undefined;
      });

    if (!generatedText) {
      return;
    }

    const blocks: KnownBlock[] = [
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `\`\`\`${generatedText}\`\`\``,
        },
      },
      {
        type: 'context',
        elements: [
          {
            type: 'mrkdwn',
            text: `:receipt: _Generated by <@${request.user_id}> | "${request.text}"_ :receipt:`,
          },
        ],
      },
    ];
    webService.sendMessage(request.channel_id, request.text, blocks);
  }
});

aiController.post('/ai/image', async (req, res) => {
  const request: SlashCommandRequest = req.body;
  if (await suppressorService.isSuppressed(request.user_id, request.team_id)) {
    res.send(`Sorry, can't do that while muzzled.`);
  } else if (!request.text) {
    res.send('Sorry, you must send a message to generate text.');
  } else if (await aiService.isAlreadyInflight(request.user_id, request.team_id)) {
    res.send('Sorry, you already have a request in flight. Please wait for that request to complete.');
  } else if (await aiService.isAlreadyAtMaxRequests(request.user_id, request.team_id)) {
    res.send('Sorry, you have reached your maximum number of requests per day. Try again tomorrow.');
  } else {
    // Need to do this to avoid timeout issues.
    res.status(200).send('Processing your request. Please be patient...');
    const generatedImage: Buffer | undefined = await aiService
      .generateImage(request.user_id, request.team_id, request.text)
      .catch(e => {
        console.error(e);
        const errorMessage = `\`Sorry! Your request for ${request.text} failed. Please try again.\``;
        webService.sendEphemeral(request.channel_id, errorMessage, request.user_id);
        return undefined;
      });

    if (!generatedImage) {
      return;
    }

    const uploadedImage = await webService
      .uploadImage(generatedImage, request.channel_id, uuid(), request.user_id)
      .catch(e => {
        console.error(e);
        const errorMessage = `\`Sorry! Your request for ${request.text} failed to upload to Slack. Please try again.\``;
        webService.sendEphemeral(request.channel_id, errorMessage, request.user_id);
        return undefined;
      });

    if (!uploadedImage) {
      return;
    }

    const blocks: KnownBlock[] = [
      {
        type: 'image',
        // eslint-disable-next-line @typescript-eslint/camelcase
        image_url: uploadedImage,
        // eslint-disable-next-line @typescript-eslint/camelcase
        alt_text: request.text,
      },
      {
        type: 'context',
        elements: [
          {
            type: 'mrkdwn',
            text: `:camera_with_flash: _Generated by <@${request.user_id}> | "${request.text}"_ :camera_with_flash:`,
          },
        ],
      },
    ];
    webService.sendMessage(request.channel_id, request.text, blocks, true);
  }
});
